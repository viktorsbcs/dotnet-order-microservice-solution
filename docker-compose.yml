services:
  order-api:
    build:
      context: ./Order.API/Order.API/
      dockerfile: ./Dockerfile
    image: order-api
    container_name: order-api
    depends_on:
      - postgres-db
      - rabbitmq
    ports:
      - 5000:5000
    env_file: 
      - path: ./api.env
        required: true
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_HTTP_PORTS=5000
      - API_POSTGRES_USER=${API_POSTGRES_USER}
      - API_POSTGRES_PASSWORD=${API_POSTGRES_PASSWORD}
      - API_POSTGRES_DB=${API_POSTGRES_DB}
      - API_POSTGRES_SERVER=${API_POSTGRES_SERVER}

  postgres-db:
    image: postgres
    container_name: postgres-server
    restart: always
    ports:
      - 5432:5432
    env_file:
      - path: ./db.env
        required: true
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - db:/var/lib/postgresql/data
      - ./PostgreData:/docker-entrypoint-initdb.d
  
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - 8080:8080
  
  express-gui-api:
    image: express-gui-api
    container_name: express-gui-api
    build:
      context: ./OrderGui.API
      dockerfile: ./Dockerfile
    ports:
      - 3001:3001
    depends_on:
      - order-api
      - rabbitmq
    restart: always
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

volumes:
  db:
    driver: local
  rabbitmq_data:
    driver: local
